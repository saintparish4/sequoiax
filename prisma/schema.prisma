generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====
enum Role {
  INVESTOR
  FOUNDER
  ADMIN
}

enum ListingStatus {
  DRAFT
  PENDING
  LIVE
  CLOSED
}

// ===== USER MANAGEMENT =====
model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  role          Role     @default(INVESTOR)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sessions      Session[]
  accounts      Account[]
  startups      Startup[]
  tokens        Token[]
  games         Game[]
  properties    Property[]
  investments   Investment[]
  notifications Notification[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([providerId])
  @@index([accountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([identifier])
  @@index([expiresAt])
  @@map("verifications")
}

// ===== INVESTMENT OPPORTUNITIES =====
model Startup {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  website      String?
  targetAmount Decimal
  logoUrl      String?
  docUrl       String?
  status       ListingStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ownerId      String

  // Relations
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  investments Investment[]

  @@index([ownerId])
  @@index([status])
  @@index([createdAt])
  @@map("startups")
}

model Token {
  id        String        @id @default(cuid())
  name      String        @unique
  ticker    String        @unique
  supply    BigInt
  price     Float
  logoUrl   String?
  docUrl    String?
  status    ListingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  ownerId   String

  // Relations
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  investments Investment[]

  @@index([ownerId])
  @@index([status])
  @@index([ticker])
  @@index([createdAt])
  @@map("tokens")
}

model Game {
  id        String        @id @default(cuid())
  title     String        @unique
  platform  String
  price     Decimal
  logoUrl   String?
  docUrl    String?
  status    ListingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  ownerId   String

  // Relations
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  investments Investment[]

  @@index([ownerId])
  @@index([status])
  @@index([platform])
  @@index([createdAt])
  @@map("games")
}

model Property {
  id        String        @id @default(cuid())
  name      String        @unique
  location  String
  price     Decimal
  logoUrl   String?
  docUrl    String?
  status    ListingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  ownerId   String

  // Relations
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  investments Investment[]

  @@index([ownerId])
  @@index([status])
  @@index([location])
  @@index([createdAt])
  @@map("properties")
}

// ===== INVESTMENTS =====
model Investment {
  id         String   @id @default(cuid())
  amount     Decimal
  createdAt  DateTime @default(now())
  investorId String

  // Polymorphic relations - only one will be non-null per investment
  startupId  String?
  tokenId    String?
  gameId     String?
  propertyId String?

  // Relations
  investor User      @relation(fields: [investorId], references: [id], onDelete: Cascade)
  startup  Startup?  @relation(fields: [startupId], references: [id], onDelete: Cascade)
  token    Token?    @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  game     Game?     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  property Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([investorId])
  @@index([startupId])
  @@index([tokenId])
  @@index([gameId])
  @@index([propertyId])
  @@index([createdAt])
  @@map("investments")
}

// ===== NOTIFICATIONS =====
model Notification {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}
